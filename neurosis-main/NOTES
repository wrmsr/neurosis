


	public static interface LibJava {

/*
struct JNIInvokeInterface_ {
    void *reserved0;
    void *reserved1;
    void *reserved2;

    jint (JNICALL *DestroyJavaVM)(JavaVM *vm);

    jint (JNICALL *AttachCurrentThread)(JavaVM *vm, void **penv, void *args);

    jint (JNICALL *DetachCurrentThread)(JavaVM *vm);

    jint (JNICALL *GetEnv)(JavaVM *vm, void **penv, jint version);

    jint (JNICALL *AttachCurrentThreadAsDaemon)(JavaVM *vm, void **penv, void *args);
};

struct JavaVM_ {
    const struct JNIInvokeInterface_ *functions;

    jint DestroyJavaVM() {
        return functions->DestroyJavaVM(this);
    }
    jint AttachCurrentThread(void **penv, void *args) {
        return functions->AttachCurrentThread(this, penv, args);
    }
    jint DetachCurrentThread() {
        return functions->DetachCurrentThread(this);
    }

    jint GetEnv(void **penv, jint version) {
        return functions->GetEnv(this, penv, version);
    }
    jint AttachCurrentThreadAsDaemon(void **penv, void *args) {
        return functions->AttachCurrentThreadAsDaemon(this, penv, args);
    }
};
*/

		// jint JNICALL JNI_GetDefaultJavaVMInitArgs(void *args);
		// public int JNI_GetDefaultJavaVMInitArgs(Pointer args);

		// jint JNICALL JNI_CreateJavaVM(JavaVM **pvm, void **penv, void *args);
		// public int JNI_CreateJavaVM(Pointer pvm, Pointer penv, Pointer args);

		// jint JNICALL JNI_GetCreatedJavaVMs(JavaVM **, jsize, jsize *);
		public int JNI_GetCreatedJavaVMs(Pointer pmvs, @size_t int size, Pointer retSize);

		// jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved);
		// public int JNI_OnLoad(Pointer vm, Pointer reserved);

		// void JNICALL JNI_OnUnload(JavaVM *vm, void *reserved);
		// public void JNI_OnUnload(Pointer vm, Pointer reserved);
	}

	public static interface AtExitLibC {

		int atexit(Pointer function);
	}

	// pthreads
	// public static interface

	public static interface MyLibC {
		public Pointer malloc(@size_t long size);
		public int atexit(Pointer function);
		public int __cxa_atexit(Pointer function, Pointer arg, Pointer dso_handle);
	}




jnr.ffi.Runtime runtime = jnr.ffi.Runtime.getSystemRuntime();
long ptrAddr = UnsafeUtils.UNSAFE.allocateMemory(1024);
Pointer ptr = Pointer.wrap(runtime, ptrAddr);
long szAddr = UnsafeUtils.UNSAFE.allocateMemory(8);
Pointer sz = Pointer.wrap(runtime, szAddr);
LibJava libJava = LibraryLoader.create(LibJava.class).load("java");
int ret = libJava.JNI_GetCreatedJavaVMs(ptr, 1024, sz);
System.out.println(ret);
// static final jnr.ffi.Runtime runtime = Library.getRuntime(libc);



